{
    "LocaleProvider": {
        "path": "LocaleProvider/LocaleProvider.md",
        "name": "LocaleProvider",
        "info": "### 说明\n\n-   国际化语言组件，用于外围包裹来支持统一控制组件的语言\n-   语言控制分为 3 层，开发者可控制的为 2 层，均为可选，优先级从低到高分别是: `组件默认语言（开发者不可控） -> LocaleProvider.locale -> Component.locale`\n\n### 注意点\n\n-   通过 Modal.method 生成的 Modal 组件的语言控制无法通过 context 简单的传输，所以使用了 runtimeLocale，如果一个页面用到了两个传入不同 locale 的 LocaleProvider，那么 runtimeLocale 可能会错乱，请务必注意\n-   如用到 DatePicker、Calendar 等日期相关组件，LocaleProvider 由于生命周期顺序的问题无法实时变更语言，需要手动设置 moment 的语言。\n\n### 演示\n\n#### 自定义语言\n\n```js {\"codepath\": \"localeprovider.jsx\"}\n```\n\n#### 组件语言\n\n```js {\"codepath\": \"componentlocale.jsx\"}\n```\n\n#### 引入语言文件\n\n代码:\n\n```js static\nimport locale from '@ucloud-fe/react-components/lib/components/LocaleProvider/locale/en_US';\n// 使用到DatePicker等日期相关组件的情况下需要手动设置moment语言\nmoment.locale('en');\nconst Demo = () => (\n    <div>\n        <LocaleProvider locale={locale}>\n            <Pagination total={100} showSizeChanger showQuickJumper={{ goButton: true }} />\n        </LocaleProvider>\n    </div>\n);\n<Demo />;\n```\n\n效果:\n\n```js {\"codepath\": \"localefile.jsx\", \"noeditor\": true}\n```\n\n#### 全语言列表\n\n```js {\"codepath\": \"list.jsx\", \"noeditor\": true}\n```\n\n#### useLocale - 使用组件中提供的多语言方案实现自己的多语言\n\n```js {\"codepath\": \"useLocale.jsx\"}\n```\n"
    }
}
