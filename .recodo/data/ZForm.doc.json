{
    "ZForm": {
        "path": "ZForm/ZForm.md",
        "name": "ZForm",
        "info": "### 说明\n\n-   ZForm 组件 为 rc-form 与 Form 组件的简单封装，包含 ZForm 组件、formDecorator、controllerDecorator 和 formShape\n\n    -   ZForm 接收 rc-form 的 form 然后转换为 context 传到下面的 controller 中，减少重复的代码编写\n    -   formDecorator 等同 rc-form 的 createForm，用于创建表单包裹\n    -   controllerDecorator 约等于 rc-form 的 getFieldDecorator 的简写\n\n-   ZForm 需要传入 rc-form 的 form 实例，ZForm 的包裹组件必须使用 formDecorator 来包裹，如下\n\n    ```js static\n    class DemoForm extends React.Component {\n        render() {\n            const { form } = this.props;\n\n            return <ZForm form={form} />;\n        }\n    }\n    DemoForm.propTypes = {\n        form: formShape\n    };\n    const Demo = formDecorator()(DemoForm);\n    ```\n\n-   formDecorator 支持传入 option\n\n    -   `onFieldsChange(props, changed, all): void` field 变化时触发\n    -   `onValuesChange(props, changed, all): void` value 变化时触发\n\n-   controllerDecorator 用于包裹表单组件来让 form 可以收集到组件中的数据，然后将封装后的组件放置到 ZForm 中，如下\n\n    ```js static\n    class Input extends React.Component {\n        render() {\n            return <input {...this.props} />;\n        }\n    }\n    const ZInput = controllerDecorator({\n        initialValue: ''\n    })(Input);\n\n    <ZForm form={form}>\n        <Item>\n            <ZInput zName=\"input\" />\n        </Item>\n    </ZForm>;\n    ```\n\n-   controllerDecorator 包裹的控件为 controlled 状态，value 和 onChange 被 form 托管，组件内定义的默认值将无法生效，如一些控件依赖默认值（如 Slider、Input）必须要注意默认值的传入\n\n    ```js static\n    class Input extends React.Component {\n        render() {\n            return <input {...this.props} />;\n        }\n    }\n    const ZInput = controllerDecorator({\n        // 不传会导致uncontrolled变换为controlled告警\n        initialValue: ''\n    })(Input);\n\n    <ZForm form={form}>\n        <Item>\n            <ZInput zName=\"input\" />\n        </Item>\n    </ZForm>;\n    ```\n\n-   controllerDecorator 支持传入 option\n\n    -   valuePropName - 组件的值的 prop 名称\n    -   getValueProps - 根据组件的值获取 props\n    -   getValueFromEvent - 如何从 event 中获取值\n    -   initialValue - 初始值\n    -   normalize(value, prev, all): Object - 格式化值\n    -   trigger - 如何获取组件的数据\n    -   validateTrigger - 何时触发校验\n    -   rules - 组件的验证规则\n    -   validateFirst - 校验是否发生错误及停止\n    -   validate - 自定义校验\n    -   validate[n].trigger - 校验何时触发\n    -   validate[n].rules - 校验规则\n    -   hidden - 是否在表单中忽略该组件，不做校验和数据手机\n\n-   validate\n\n    ```js static\n    {\n        validateTrigger: 'onBlur',\n        rules: [{required: true}],\n    }\n    /* 等效于 */\n    {\n        validate: [{\n            trigger: 'onBlur',\n            rules: [{required: true}],\n        }]\n    }\n    ```\n\n-   默认的 getValueFromEvent\n\n    ```js static\n    function defaultGetValueFromEvent(e) {\n        if (!e || !e.target) {\n            return e;\n        }\n        const { target } = e;\n        return target.type === 'checkbox' ? target.checked : target.value;\n    }\n    ```\n\n-   form 实例下有一系列方法来获取、设置、校验值等\n\n    -   getFieldsValue([fieldNames: String[]])\n        获取对应 field 的值，不传为所有\n    -   getFieldValue(fieldName: String)\n        获取单个 field 的值\n    -   getFieldInstance(fieldName: String)\n        获取对应 field 的实例\n    -   setFieldsValue(obj: Object)\n        通过 key-value 对象设置 field 的值\n    -   setFieldsInitialValue(obj: Object)\n        通过 key-value 对象设置 field 的初始值\n    -   setFields(obj: Object)\n        通过 key-value 对象设置 field 的值和 errors\n    -   validateFields([fieldNames: String[]], [options: Object], callback: (errors, values) => void)\n        校验表单\n    -   getFieldsError(names): Object{ [name]: String[] }\n        获取对应 field 的错误信息\n    -   getFieldError(name): String[]\n        获取 field 的错误\n    -   isFieldValidating(name: String): Bool\n        获取 field 是否正在校验\n    -   isFieldsValidating(names: String[]): Bool\n        是否其中存在 field 正在校验\n    -   isFieldTouched(name: String): Bool\n        获取 field 是否被用户做过更改\n    -   isFieldsTouched(names: String[]): Bool\n        是否其中存在 field 被用户做过更改\n    -   resetFields([names: String[]])\n        初始化/重置对应的 field\n\n-   更多使用细节查看下方的演示\n\n-   如果需要查看更多内容请看[rc-form 文档](https://github.com/react-component/form#option-object)\n\n### 注意事项\n\n-   formDecorator 包裹的表单不能为 stateless/functional 组件\n-   controllerDecorator 包裹的表单控件也不能为 stateless/functional 组件\n-   zName 必须为唯一值\n\n### 演示\n\n#### 普通使用\n\n```js {\"codepath\": \"base.jsx\"}\n```\n\n#### 自定义校验规则\n\n```js {\"codepath\": \"rule.jsx\"}\n```\n\n#### 使用 zName 定义表单数据结构\n\n```js {\"codepath\": \"name.jsx\"}\n```\n\n#### 模拟主机创建表单\n\n```js {\"codepath\": \"uhost.jsx\"}\n```\n"
    }
}
